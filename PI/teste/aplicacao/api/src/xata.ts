// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "cards",
    checkConstraints: {
      cards_xata_id_length_xata_id: {
        name: "cards_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      cards_xata_text_length_dificuldade: {
        name: "cards_xata_text_length_dificuldade",
        columns: ["dificuldade"],
        definition: "CHECK ((octet_length(dificuldade) <= 204800))",
      },
      cards_xata_text_length_materia: {
        name: "cards_xata_text_length_materia",
        columns: ["materia"],
        definition: "CHECK ((octet_length(materia) <= 204800))",
      },
      cards_xata_text_length_pergunta: {
        name: "cards_xata_text_length_pergunta",
        columns: ["pergunta"],
        definition: "CHECK ((octet_length(pergunta) <= 204800))",
      },
      cards_xata_text_length_resposta: {
        name: "cards_xata_text_length_resposta",
        columns: ["resposta"],
        definition: "CHECK ((octet_length(resposta) <= 204800))",
      },
      cards_xata_text_length_submateria: {
        name: "cards_xata_text_length_submateria",
        columns: ["submateria"],
        definition: "CHECK ((octet_length(submateria) <= 204800))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_cards_xata_id_key: {
        name: "_pgroll_new_cards_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "acertos",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "dificuldade",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: "'medio'::text",
        comment: '{"xata.type":"text"}',
      },
      {
        name: "materia",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "pergunta",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "resposta",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "submateria",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "users",
    checkConstraints: {
      users_xata_id_length_xata_id: {
        name: "users_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_users_xata_id_key: {
        name: "_pgroll_new_users_xata_id_key",
        columns: ["xata_id"],
      },
      users__pgroll_new_email_key: {
        name: "users__pgroll_new_email_key",
        columns: ["email"],
      },
    },
    columns: [
      {
        name: "email",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "nome",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "senha",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Cards = InferredTypes["cards"];
export type CardsRecord = Cards & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  cards: CardsRecord;
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://PII---Poliedro---2025-s-workspace-crv4k8.us-east-1.xata.sh/db/PI", 
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient({
    apiKey: process.env.XATA_API_KEY,
    branch: process.env.XATA_BRANCH,
  });
  return instance;
};
