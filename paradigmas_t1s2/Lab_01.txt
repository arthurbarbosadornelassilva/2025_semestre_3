PARADIGMAS (LAB 1 - 20/02/2025):


- Linguagens de Programação (LP): conjunto de regras sintáticas e semânticas usadas para comunicar instruções para um computador, definindo um programa

- Evolução das LPs:

    Classificação das LPs em gerações (classificação de Henri Bal e Dick Grune):
    1 - Binário
    2 - Assembly
    3 - Linguagem Procedural (FORTRAN, ALGOL, COBOL)
    4 - Linguagens Aplicativas
    5 - IA (Lógica Funcional)
    6 - Redes Neurais

- Introdução à Linguagem C:

    - Criada por Denis Ritchie, na décadade 1970;
    - Apresenta desempenho superior (velocidade de execução) até os dias atuais;

--//--

EXERCÍCIOS:


PARTE 1

1)
#include <stdio.h>

int populacao = 100000;
float peso = 75.5;
char str[] = "O2";

int main()
{
	printf("Hello World \n");
	printf("Valor populacao = %i, valor peso = %5.2f, simbolo oxigenio = %s\n", populacao, peso, str);

    return 0;
}

2)
#include <stdio.h>

int porcentagem = 50;
int dia = 31;
int mes = 12;
int ano = 2000;
float valor = 50000000;

int main() {
    printf("A - Vendemos %i porcento mais que no ano passado. \nB - Em %i/%i/%i nosso capital era de R$%10.2f. \nC - A barra tilizada para pastas seria '/' ou 'contra-barra'?", porcentagem, dia, mes, ano, valor);

    return 0;
}

3)
#include <stdio.h>
#include <conio.h>

char entrada1, entrada2, entrada3, entrada4;

int main() {

    printf("Digite um caractere/letra: \n");
    scanf("%c", &entrada1);

    // Limpando o buffer do teclado
    while (getchar() != '\n');

    printf("Digite outro caractere/letra: \n");
    entrada2 = getchar();
    
    // Limpando o buffer do teclado
    while (getchar() != '\n');

    printf("Digite outro caractere/letra (caractere se manterá oculto com getch): \n");
    entrada3 = getch();
    
    // Limpando o buffer do teclado
    while (getchar() != '\n');

    printf("Digite outro caractere/letra: \n");
    entrada4 = getche();
    
    // Limpando o buffer do teclado
    while (getchar() != '\n');

    printf("ASCII das entradas: %d, %d, %d, %d", entrada1, entrada2, entrada3, entrada4);

    return 0;
}

4)
X = -9 / Y = 11 / Z = 11

5)
# include <stdio.h>

int main(){
    float valor1, valor2, soma, multi, div, media_real;
    int media_inteira;
    
    printf("Digite um valor:");
    scanf("%f", &valor1);
    printf("Digite outro valor:");
    scanf("%f", &valor2);

    soma = valor1 + valor2;
    multi = valor1 * valor2;
    div = valor1 / valor2;
    
    int soma_inteira = soma;
    media_inteira = soma_inteira / 2;
    media_real = soma / 2.0;

    printf("Soma = %f\nMultiplicacao = %f\nDivisao = %f\nMedia Aritmetica (inteira) = %i\nMedia Aritmetica (real) = %f", soma, multi, div, media_inteira, media_real);

    return 0;
}

6)
#include <stdio.h>

float temp;
float conversao;

int main() { 
    printf("Conversor de Temperatura C° para F° \n");
    printf("\nDigite a temperatura em C°: \n");
    scanf("%f", &temp); // não podemos utilizar getchar() nesse caso porque o valor buscado é numérico

    conversao = temp * (9.0/5.0) + 32;  //usamos os valores decimais na divisão porque, no C, se o valor for inteiro o resultado será inteiro (ex.: 9/5 = 1)

    printf("A temperatura em F° será de %.2f", conversao);

    return 0;
}

7)
    a) V
    b) V

8) Verdadeiro

9) Falso

10) Verdadeiro

11) Verdadeiro 

12) Falso

13) Falso (n tenho ctz)

14) Alternativa D

15) Alternativa A // %s insere "Juros de ", %d insere 10, %% imprime %, pois % é um caractere especial no printf.

16)
    a) 6
    b) 46 (se considerarmos inicialmente b = 6, temos como resposta b = 138)
    c) 11 (se considerarmos inicialmente b = 138, temos como resposta a = 147)
    d) False (147 != 146)

17) Resposta: -7


PARTE 2 (AVISO! COMO NÃO TIVE TEMPO DE FAZER A PARTE 2, PEGUEI AS RESPOSTAS POR IA)

1)
#include <stdio.h>

int findConta(int *conta, int cc[1000], int n);
void openConta(int conta, float *saldo, int cc[1000], int *n);
void fazerDeposito(float saldo[1000], int i);
void fazerSaque(float saldo[1000], int i);
void fazerPIX(float saldo[1000], int i, float saldo_destino[1000], int j);
float tomaValor(void);
void menu(int *p);

int main(void) {
    int cc[1000], n = 0, i, j, op, conta, conta_destino;
    float saldo[1000];

    for (i = 0; i < 1000; i++) {
        cc[i] = 0;
        saldo[i] = 0;
    }

    do {
        menu(&op);
        if (op == 1) {
            i = findConta(&conta, cc, n);
            if (i != n) 
                printf("Esta conta-corrente já existe\n");
            else 
                openConta(conta, saldo, cc, &n);
        }
        if (op == 2) {
            i = findConta(&conta, cc, n);
            if (i == n) 
                printf("Número de conta-corrente inválido\n");
            else 
                printf("Saldo: %.2f\n", saldo[i]);
        }
        if (op == 3) {
            i = findConta(&conta, cc, n);
            if (i == n) 
                printf("Número de conta-corrente inválido\n");
            else 
                fazerDeposito(saldo, i);
        }
        if (op == 4) {
            i = findConta(&conta, cc, n);
            if (i == n) 
                printf("Número de conta inválido\n");
            else 
                fazerSaque(saldo, i);
        }
        if (op == 5) {
            i = findConta(&conta, cc, n);
            j = findConta(&conta_destino, cc, n);
            if (i == n || j == n) 
                printf("Conta inválida\n");
            else 
                fazerPIX(saldo, i, saldo, j);
        }
    } while (op != 6);

    return 0;
}

void menu(int *p) {
    printf("1) Abrir conta\n");
    printf("2) Verificar saldo\n");
    printf("3) Fazer Depósito\n");
    printf("4) Fazer Saque\n");
    printf("5) Fazer PIX\n");
    printf("6) Sair do sistema\n");
    scanf("%d", p);
}

int findConta(int *conta, int cc[1000], int n) {
    int j;
    printf("Número da conta: ");
    scanf("%d", conta);
    for (j = 0; j < n && *conta != cc[j]; j++);
    return j;
}

void openConta(int conta, float *saldo, int cc[1000], int *n) {
    float valor;
    printf("Valor do depósito inicial: ");
    valor = tomaValor();
    cc[*n] = conta;
    saldo[*n] = valor;
    (*n)++;
    printf("Operação realizada com sucesso\n");
}

void fazerDeposito(float saldo[1000], int i) {
    float valor;
    printf("Valor do depósito: ");
    valor = tomaValor();
    saldo[i] += valor;
    printf("Operação realizada com sucesso\n");
}

void fazerSaque(float saldo[1000], int i) {
    float valor;
    printf("Valor do saque: ");
    valor = tomaValor();
    if (valor > saldo[i])
        printf("Saldo insuficiente\n");
    else {
        saldo[i] -= valor;
        printf("Operação realizada com sucesso\n");
    }
}

void fazerPIX(float saldo[1000], int i, float saldo_destino[1000], int j) {
    float valor;
    printf("Valor do PIX: ");
    valor = tomaValor();
    if (valor > saldo[i])
        printf("Saldo insuficiente\n");
    else {
        saldo[i] -= valor;
        saldo_destino[j] += valor;
        printf("PIX realizado com sucesso\n");
    }
}

float tomaValor(void) {
    float valor;
    scanf("%f", &valor);
    while (valor <= 0) {
        printf("O valor deve ser positivo.\n");
        printf("Valor: ");
        scanf("%f", &valor);
    }
    return valor;
}

2)
#include <stdio.h>

void lerMatriz(int A[3][3]);
void imprimirMatriz(int A[3][3]);
void multiplicarMatrizes(int A[3][3], int B[3][3], int C[3][3]);
void somarMatrizes(int A[3][3], int B[3][3], int C[3][3]);
void subtrairMatrizes(int A[3][3], int B[3][3], int C[3][3]);
void transporMatriz(int A[3][3], int C[3][3]);

int main() {
    int A[3][3], B[3][3], C[3][3], op;

    printf("Digite os valores da matriz A:\n");
    lerMatriz(A);

    printf("Digite os valores da matriz B:\n");
    lerMatriz(B);

    do {
        printf("Escolha uma operação:\n");
        printf("(1) C = A * B\n");
        printf("(2) C = A - B\n");
        printf("(3) C = A + B\n");
        printf("(4) A transposta da matriz C, sendo que C = A * B\n");
        printf("(5) Sair\n");
        scanf("%d", &op);

        switch (op) {
            case 1:
                multiplicarMatrizes(A, B, C);
                imprimirMatriz(C);
                break;
            case 2:
                subtrairMatrizes(A, B, C);
                imprimirMatriz(C);
                break;
            case 3:
                somarMatrizes(A, B, C);
                imprimirMatriz(C);
                break;
            case 4:
                multiplicarMatrizes(A, B, C);
                transporMatriz(C, C);
                imprimirMatriz(C);
                break;
        }
    } while (op != 5);

    return 0;
}

void lerMatriz(int A[3][3]) {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            scanf("%d", &A[i][j]);
}

void imprimirMatriz(int A[3][3]) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++)
            printf("%d ", A[i][j]);
        printf("\n");
    }
}

void multiplicarMatrizes(int A[3][3], int B[3][3], int C[3][3]) {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++) {
            C[i][j] = 0;
            for (int k = 0; k < 3; k++)
                C[i][j] += A[i][k] * B[k][j];
        }
}

void somarMatrizes(int A[3][3], int B[3][3], int C[3][3]) {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            C[i][j] = A[i][j] + B[i][j];
}

void subtrairMatrizes(int A[3][3], int B[3][3], int C[3][3]) {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            C[i][j] = A[i][j] - B[i][j];
}

void transporMatriz(int A[3][3], int C[3][3]) {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            C[j][i] = A[i][j];
}

3)
#include <stdio.h>

void ordenarDecrescente(int vetor[], int tamanho);

int main() {
    int vetor[10];

    printf("Digite 10 valores:\n");
    for (int i = 0; i < 10; i++) {
        scanf("%d", &vetor[i]);
    }

    ordenarDecrescente(vetor, 10);

    printf("Valores em ordem decrescente:\n");
    for (int i = 0; i < 10; i++) {
        printf("%d ", vetor[i]);
    }
    
    return 0;
}

void ordenarDecrescente(int vetor[], int tamanho) {
    int temp;
    for (int i = 0; i < tamanho - 1; i++) {
        for (int j = i + 1; j < tamanho; j++) {
            if (vetor[i] < vetor[j]) {
                temp = vetor[i];
                vetor[i] = vetor[j];
                vetor[j] = temp;
            }
        }
    }
}

4)
#include <stdio.h>
#include <string.h>

#define MAX_PROJETOS 100

typedef struct {
    char nome[50];
    char area[20];  // Marketing, Operacional ou Inovação
    float valor;
    char data_inicio[11];
    int duracao;
} Projeto;

void cadastrarProjeto(Projeto projetos[], int *numProjetos);
void listarProjetos(Projeto projetos[], int numProjetos);

int main() {
    Projeto projetos[MAX_PROJETOS];
    int numProjetos = 0, opcao;

    do {
        printf("\n1 - Cadastrar Projeto\n");
        printf("2 - Listar Projetos\n");
        printf("3 - Sair\n");
        printf("Escolha: ");
        scanf("%d", &opcao);
        getchar();  

        switch (opcao) {
            case 1:
                cadastrarProjeto(projetos, &numProjetos);
                break;
            case 2:
                listarProjetos(projetos, numProjetos);
                break;
        }
    } while (opcao != 3);

    return 0;
}

void cadastrarProjeto(Projeto projetos[], int *numProjetos) {
    if (*numProjetos >= MAX_PROJETOS) {
        printf("Número máximo de projetos atingido!\n");
        return;
    }

    printf("Nome do projeto: ");
    fgets(projetos[*numProjetos].nome, 50, stdin);
    projetos[*numProjetos].nome[strcspn(projetos[*numProjetos].nome, "\n")] = 0;

    printf("Área (Marketing, Operacional, Inovação): ");
    fgets(projetos[*numProjetos].area, 20, stdin);
    projetos[*numProjetos].area[strcspn(projetos[*numProjetos].area, "\n")] = 0;

    printf("Valor total do projeto: ");
    scanf("%f", &projetos[*numProjetos].valor);
    getchar();

    printf("Data de início (dd/mm/aaaa): ");
    fgets(projetos[*numProjetos].data_inicio, 11, stdin);
    projetos[*numProjetos].data_inicio[strcspn(projetos[*numProjetos].data_inicio, "\n")] = 0;

    printf("Duração (em meses): ");
    scanf("%d", &projetos[*numProjetos].duracao);
    getchar();

    (*numProjetos)++;
    printf("Projeto cadastrado com sucesso!\n");
}

void listarProjetos(Projeto projetos[], int numProjetos) {
    if (numProjetos == 0) {
        printf("Nenhum projeto cadastrado.\n");
        return;
    }

    printf("\nLista de Projetos:\n");
    for (int i = 0; i < numProjetos; i++) {
        printf("\nProjeto %d:\n", i + 1);
        printf("Nome: %s\n", projetos[i].nome);
        printf("Área: %s\n", projetos[i].area);
        printf("Valor: %.2f\n", projetos[i].valor);
        printf("Data de Início: %s\n", projetos[i].data_inicio);
        printf("Duração: %d meses\n", projetos[i].duracao);
    }
}

5)
#include <stdio.h>

int main() {
    FILE *arquivo;

    arquivo = fopen("gatos.txt", "w");

    if (arquivo == NULL) {
        printf("Erro ao criar o arquivo.\n");
        return 1;
    }

    fprintf(arquivo, "eu amo gatos\n");
    fclose(arquivo);

    printf("Arquivo criado com sucesso!\n");
    return 0;
}