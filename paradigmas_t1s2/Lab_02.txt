Testando a lógica de programação da linguagem C:

#include <stdio.h>

int valor = 10;
char num[10] = "Macaquinho"; // vetor de caracteres com valor de string
char nome[15]; // declaração do vetor de caracteres

int main()
{
    printf("Você tirou nota %i, %s!!\n", valor, num);
    printf("Digite agora o seu nome: \n");
    fgets(nome, sizeof(nome), stdin); // função para a entrada de dados no vetor 'nome'
    
    printf("Olá %s \n\n", nome);

    int num = 42; //declarando variável inteira
    int *ponteiro; //declarando ponteiro
    
    ponteiro = &num; //atribuindo o endereço de 'num' ao ponteiro
    
    printf("Valor de 'numero': %d\n", num);
    printf("Endereço de 'numero': %p\n", (void*)&num); //aponta para o endereço de memória onde a variável inteira 'num' é armazenada
    printf("Valor apontado por 'ponteiro': %d\n", *ponteiro);
    
    * ponteiro = 100; // Modificando o valor diretamente através do ponteiro
    printf("Valor de 'numero': %d\n", num);
    printf("Valor apontado por 'ponteiro': %d\n", *ponteiro);
    
    int vetor_numerico[] = {10, 20, 30, 40};
    int * ponteiro_array = vetor_numerico;
    printf("Primeiro elemento do array: %d\n", *ponteiro_array); // o ponteiro armazenena os valores do vetor, mas printa apenas o primeiro elemento
    printf("Segundo elemento do array: %d\n", *(ponteiro_array + 1)); //o uso do +X permite que os outros elementos sejam printados individualmente
    
    // criando uma função que printa todos os valores do vetor
    
    int i = 0;
    for (i; i < 4; i++) {
        printf("TODOS os elementos do array: %d\n", *(ponteiro_array + i));
        
    }
    
    char letras[5] = {'a', 'b', 'c', 'd', 'e'};
    char *ptr = letras;
    
    for (i; i < 5; i++){
    printf("\nLetras[%d] = %c ptr = %c", i, letras[i], *ptr); // o conteudo do vetor acessadopela variavel e pelo ponteiro
    ptr++;
}
    
    return 0;
}

EXERCÍCIOS:

1 -)

#include <stdio.h>
#include <stdlib.h>

#define LINHAS 3
#define COLUNAS 3

int main(int argc, char *argv[])
{
    // declaração de variável ponteiro para ponteiro
    int **mat;
    // alocando o vetor de ponteiros
    mat = (int **)malloc(LINHAS * sizeof(int *));
    // alocando cada uma das linhas da matriz
    int i;
    for (i = 0; i < LINHAS; i++)
        mat[i] = (int *)malloc(COLUNAS * sizeof(int));
    int j;
    // preenchendo a matriz
    for (i = 0; i < LINHAS; i++)
    {
        for (j = 0; j < COLUNAS; j++)
            mat[i][j] = i + j;
    }
    // mostrando os elementos da matriz
    for (i = 0; i < LINHAS; i++)
    {
        for (j = 0; j < COLUNAS; j++)
            printf("%d\t", mat[i][j]);
        printf("\n");
    }

    // CRIANDO MATRIZ B
    int matb[3][2] = {3, 4, 5, 6, 7, 8};

    printf("%i", matb);

    // liberando o espaço de memória
    // libera cada linha
    for (i = 0; i < LINHAS; i++)
        free(mat[i]);
    // libera o vetor de ponteiros
    free(mat);
    return 0;
}

2 -)
#include <stdio.h>

int main() {
    float decimal;
    char str[20];
    float *ptrFloat;
    char *ptrStr;

    printf("Alocação dinâmica de memória \n\nInsira um valor decimal abaixo:\n");
    scanf("%f", &decimal);

    ptrFloat = &decimal;
    printf("\nValor Decimal: %4.1f", *ptrFloat);

    // Conversão do valor decimal para string
    sprintf(str, "%.2f", *ptrFloat);

    ptrStr = str; // CORRETO: str já é o endereço do primeiro caractere
    printf("\nValor String Convertida: %s", ptrStr);

    // Os valores armazenados nos ponteiros são alojados na memória da stack, e não foram alocados dinamicamente nesse caso, portanto não consigo utilizar "free()"

    return 0;
}