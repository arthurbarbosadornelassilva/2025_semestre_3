** ATIVIDADE 04 - Lab **

EXERCÍCIOS DA LISTA 9

- 1)
# Raio: 6cm/ constante PI: 3
# funcao area(raio): PI * (raio ** 2)
# funcao volume(raio): (4/3) * (PI * raio ** 3)

object FuncoesEsfera{
    val pi: Int = 3

    def area(r: Int): Int = {
        pi * (r * r)
    }
    def volume(r: Double): Double = {
        (4.0/3.0) * pi * (r * r * r)
    }
}

val testeArea = FuncoesEsfera.area(6)
println(testeArea + "cm²")
val testeVolume = FuncoesEsfera.volume(6)
println(testeVolume + "cm³")

- 2)
# celcius: 30
# funcao fahrenheit(celcius): (celcius * 9.0/5.0) + 32

val celcius: Double = 30.0
val fahrenheit: (Double) => Double = (tempCelcius) => (tempCelcius * 9.0/5.0) + 32

val testeFahrenheit = fahrenheit(celcius)
println(testeFahrenheit)


EXERCÍCIOS DA LISTA 10:

- 1)
object SilhuetaEdificios {

  type Edificio = (Int, Int, Int)
  type Evento = (Int, Int, Int)

  def calcularSilhueta(edificios: Seq[Edificio]): Seq[Int] = {
    val eventos = edificios.flatMap { case (esquerda, altura, direita) =>
      Seq(
        (esquerda, altura, 1),  // Evento de início
        (direita, altura, -1)   // Evento de fim
      )
    }.sortBy { case (coord, altura, tipo) =>
      (coord, -tipo, if (tipo == 1) -altura else altura)
    }

    var silhueta: List[Int] = List()
    var alturasAtivas: scala.collection.mutable.TreeMap[Int, Int] =
      scala.collection.mutable.TreeMap[Int, Int]()(Ordering.Int.reverse) // Ordenar decrescentemente

    var alturaAtual = 0
    var ultimaCoordenada = 0

    def adicionarAltura(altura: Int): Unit = {
      alturasAtivas(altura) = alturasAtivas.getOrElse(altura, 0) + 1
    }

    // Remove uma altura do mapa de alturas ativas
    def removerAltura(altura: Int): Unit = {
      alturasAtivas(altura) = alturasAtivas(altura) - 1
      if (alturasAtivas(altura) == 0) {
        alturasAtivas.remove(altura)
      }
    }

    for ((coord, altura, tipo) <- eventos) {
      if (coord != ultimaCoordenada) {
        val maiorAlturaAtiva = if (alturasAtivas.isEmpty) 0 else alturasAtivas.firstKey
        if (alturaAtual != maiorAlturaAtiva) {
          silhueta = silhueta :+ ultimaCoordenada :+ alturaAtual
          silhueta = silhueta :+ coord :+ maiorAlturaAtiva
          alturaAtual = maiorAlturaAtiva
        } else {
          silhueta = silhueta :+ coord :+ alturaAtual
        }
      }

      // Processar o evento
      if (tipo == 1) { // Evento de início de edifício
        adicionarAltura(altura)
      } else { // Evento de fim de edifício
        removerAltura(altura)
      }

      // Atualizar a altura atual e a última coordenada
      val novaAltura = if (alturasAtivas.isEmpty) 0 else alturasAtivas.firstKey
      if (novaAltura != alturaAtual) {
        if (ultimaCoordenada != coord) {
          silhueta = silhueta :+ coord :+ novaAltura
        } else {
          // Caso especial: múltiplos eventos na mesma coordenada
          // A altura deve ser atualizada para a nova altura
          if (silhueta.nonEmpty && silhueta.last == alturaAtual) {
            silhueta = silhueta.init :+ novaAltura
          } else {
            silhueta = silhueta :+ coord :+ novaAltura
          }
        }
        alturaAtual = novaAltura
      }
      ultimaCoordenada = coord
    }

    // A silhueta deve terminar com a coordenada do último ponto e altura 0
    if (silhueta.nonEmpty && silhueta.last != 0) {
      silhueta = silhueta :+ ultimaCoordenada :+ 0
    } else if (silhueta.isEmpty && edificios.nonEmpty) {
      // Caso de um único edifício que gera silhueta (start, height, end, 0)
      val lastCoord = eventos.last._1
      silhueta = silhueta :+ lastCoord :+ 0
    }

    val silhuetaFinal = silhueta.filterNot(x => x == -1 || x == 1).distinct // Remove os tipos de evento temporariamente.

    val resultadoFinal = collection.mutable.ListBuffer[Int]()
    var lastCoord = -1
    var lastHeight = -1

    val cleanedSilhueta = collection.mutable.ListBuffer[Int]()
    if (silhueta.nonEmpty) {
      var currentCoord = silhueta.head
      var currentHeight = silhueta(1)
      cleanedSilhueta.append(currentCoord)
      cleanedSilhueta.append(currentHeight)

      for (i <- 2 until silhueta.length by 2) {
        val nextCoord = silhueta(i)
        val nextHeight = silhueta(i + 1)
        if (nextHeight == currentHeight) {
          
        } else {
          cleanedSilhueta.append(nextCoord)
          cleanedSilhueta.append(nextHeight)
          currentCoord = nextCoord
          currentHeight = nextHeight
        }
      }
    }

    val finalSilhuetaList = collection.mutable.ListBuffer[Int]()
    var currentMaxHeight = 0
    var previousCoord = 0

    for ((coord, height, typeOfEvent) <- eventos) {
      if (typeOfEvent == 1) { // Start of building
        addicionarAltura(height)
      } else { // End of building
        removerAltura(height)
      }

      val newMaxHeight = if (alturasAtivas.isEmpty) 0 else alturasAtivas.firstKey

      if (newMaxHeight != currentMaxHeight) {
        if (coord != previousCoord) { // Adicionar ponto (coord, old_height)
          finalSilhuetaList.append(previousCoord)
          finalSilhuetaList.append(currentMaxHeight)
        }
        // Adicionar ponto (coord, new_height)
        finalSilhuetaList.append(coord)
        finalSilhuetaList.append(newMaxHeight)
        currentMaxHeight = newMaxHeight
      }
      previousCoord = coord
    }

    val consolidatedSilhueta = collection.mutable.ListBuffer[Int]()
    var prevCoord = -1
    var prevHeight = -1

    for (i <- finalSilhuetaList.indices by 2) {
      val coord = finalSilhuetaList(i)
      val height = finalSilhuetaList(i + 1)

      if (coord != prevCoord && height != prevHeight) {
        consolidatedSilhueta.append(coord)
        consolidatedSilhueta.append(height)
        prevCoord = coord
        prevHeight = height
      } else if (coord == prevCoord && height != prevHeight) {
        // Handle case like (X, H1, X, H2) -> replace H1 with H2
        if (consolidatedSilhueta.nonEmpty && consolidatedSilhueta.last == prevHeight) {
          consolidatedSilhueta.remove(consolidatedSilhueta.length - 1)
          consolidatedSilhueta.append(height)
        } else {
          consolidatedSilhueta.append(coord)
          consolidatedSilhueta.append(height)
        }
        prevCoord = coord
        prevHeight = height
      }
    }

    // Adicionar o ponto final com altura 0, se necessário
    if (consolidatedSilhueta.nonEmpty && consolidatedSilhueta.last != 0) {
      consolidatedSilhueta.append(consolidatedSilhueta(consolidatedSilhueta.length - 2)) // Last coord
      consolidatedSilhueta.append(0)
    }

    val finalOutput = collection.mutable.ListBuffer[Int]()
    for (i <- consolidatedSilhueta.indices by 2) {
      val coord = consolidatedSilhueta(i)
      val height = consolidatedSilhueta(i + 1)
      finalOutput.append(coord)
      finalOutput.append(height)
    }

    if (finalOutput.nonEmpty && finalOutput.last == 0) {
      finalOutput.remove(finalOutput.length - 1) // Remove o 0 final
    }

    finalOutput.toSeq
  }

  def main(args: Array[String]): Unit = {
    // Exemplo fornecido no documento [cite: 10]
    val edificiosExemplo: Seq[Edificio] = Seq(
      (1, 11, 5), (2, 6, 7), (3, 13, 9), (12, 7, 16),
      (14, 3, 25), (19, 18, 22), (23, 13, 29), (24, 4, 28)
    )

    println("Edifícios de entrada: " + edificiosExemplo)
    val silhuetaCalculada = calcularSilhueta(edificiosExemplo)
    println("Silhueta calculada:  " + silhuetaCalculada)
    
    val silhuetaEsperada = Seq(1, 11, 3, 13, 9, 0, 12, 7, 16, 3, 19, 18, 22, 3, 23, 13, 29)
    println("Silhueta esperada:   " + silhuetaEsperada)

    // Teste com edifícios simples
    val edificiosSimples1: Seq[Edificio] = Seq((1, 5, 5)) // Um único edifício
    println("\nEdifícios Simples 1: " + edificiosSimples1)
    println("Silhueta Simples 1:  " + calcularSilhueta(edificiosSimples1))

    val edificiosSimples2: Seq[Edificio] = Seq((1, 10, 5), (3, 15, 7)) // Edifícios sobrepostos
    println("\nEdifícios Simples 2: " + edificiosSimples2)
    println("Silhueta Simples 2:  " + calcularSilhueta(edificiosSimples2))

  }
}

- 2)
Capítulo 1 - Introdução
- Os benefícios do uso de GPUs e Paralelismo (processos paralelos)
- Sobre o Cuda: plataforma de computação paralela de propósito geral
- Programação Escalável

Capítulo 2 - Modelo de Programação
- Sobre os Kernels do Cuda
- Hierarquia de Threads
- Hierarquia de Memória
- Programação Heterogênea
- Capacidade Computacional

EXERCÍCIOS DA LISTA 11:

- 1)
module FuncoesEsfera where

import Data.Bifunctor (bimap)

myPiInt :: Int
myPiInt = 3

area :: Int -> Int
area r = myPiInt * (r * r)

volume :: Double -> Double
volume r = (4.0 / 3.0) * pi * (r * r * r)

main :: IO ()
main = do
  let testeArea = area 6
  putStrLn $ show testeArea ++ "cm²"

  let testeVolume = volume 6.0
  putStrLn $ show testeVolume ++ "cm³"

- 2)
celcius :: Double
celcius = 30.0

fahrenheit :: Double -> Double
fahrenheit tempCelcius = (tempCelcius * 9.0 / 5.0) + 32.0

main :: IO ()
main = do
  let testeFahrenheit = fahrenheit celcius
  putStrLn $ show testeFahrenheit