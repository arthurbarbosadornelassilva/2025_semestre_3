**ATIVIDADE 02 - Laboratório**

**ALGUNS DESSES EXERCÍCIOS FORAM FEITOS JUNTAMENTE DO GRUPO DO PI E, PORTANTO, PODEM SER SEMELHANTES**


EXERCÍCIOS DA LISTA 3

- 2)
#include <iostream>
#include <algorithm>
using namespace std; //considera que todos os nomes na biblioteca std são válidos sem a necessidade de usar std:: antes de cada comando

int saque;
int para_entregar;
int opcoes[4] = {200, 50, 5, 1};

int main(void) {
    
    printf("CAIXA ELETRONICO\n\n");
    printf("Digite o valor desejado\n");
    scanf("%d", &saque);
    
    para_entregar = saque;
    
    for(int i = 0; i < 4; i++) {
        int count = 0;
        while (opcoes[i] <= saque){
            count++;
            saque -= opcoes[i];
            para_entregar = saque;
        }
        printf("%i Nota de %i reais\n Resta entregar %i reais\n\n", count, opcoes[i], para_entregar);
        // IDEIA QUE EU TIVE QUE FOI SUBSTITUÍDA PELO LOOP 'WHILE' ACIMA
        // else{ 
        //     i -= 1;
        // }
    }
    cout << "Falta " << para_entregar << " para entregar\n" << endl;

    return 0;
}

- 3)
#include <iostream>
#include <sstream>
#include <vector>
using namespace std; //considera que todos os nomes na biblioteca std são válidos sem a necessidade de usar std:: antes de cada comando

class NomeCompleto {
private:
    string nomeCompleto;
    string sobrenome;
    vector<string> iniciais;

public:
    void lerNome() {
        cout << "Digite o nome completo: ";
        getline(cin, nomeCompleto);
    }

    void processarNome() {
        stringstream ss(nomeCompleto);
        string palavra;
        vector<string> palavras;

        // Divide o nome completo em palavras
        while (ss >> palavra) {
            palavras.push_back(palavra);
        }

        // O último elemento é o sobrenome
        sobrenome = palavras.back();
        palavras.pop_back();

        // Os demais elementos são os nomes, dos quais extraímos as iniciais
        for (const string& nome : palavras) {
            iniciais.push_back(nome.substr(0, 1) + ".");
        }
    }

    void imprimirResultado() {
        cout << sobrenome << ", ";
        for (const string& inicial : iniciais) {
            cout << inicial << " ";
        }
        cout << endl;
    }
};

int main(void) {
    NomeCompleto nc;
    nc.lerNome();
    nc.processarNome();
    nc.imprimirResultado();

    return 0;
}

EXERCÍCIOS DA LISTA 4:

- 2)
# a)
import pandas as pd
from google.colab import files
import matplotlib.pyplot as plt

uploaded = files.upload()


caminho_arquivo = list(uploaded.keys())[0]


dados = pd.read_excel(caminho_arquivo, sheet_name="Pedidos de Asilo")

dados['Número de Pedidos'] = pd.to_numeric(dados['Número de Pedidos'], errors='coerce')


print("Dimensões do DataFrame:", dados.shape)
print("Linhas iniciais do DataFrame:")
print(dados.head(10))

# b)
plt.figure(figsize=(10, 6))
plt.hist(
    dados["Número de Pedidos"].dropna(),
    bins=100,
    range=(0, 100),
    color="#003b64",
    edgecolor="black",
    alpha=0.7
)


plt.title("Distribuição do Número de Pedidos de Asilo")
plt.xlabel("Número de Pedidos")
plt.ylabel("Frequência")
plt.grid(True)
plt.xlim(0, 100)


plt.show()

# c)
plt.figure(figsize=(12, 6))
plt.scatter(
    dados["Ano"],
    dados["Número de Pedidos"],
    color="#003b64",
    alpha=0.5,
    s=10,
)


plt.title("Número de Pedidos de Asilo ao Longo dos Anos")
plt.xlabel("Ano")
plt.ylabel("Número de Pedidos")
plt.grid(True)


plt.show()

- 3)
import pandas as pd

estoque = [
    {"nome": "Camiseta", "quantidade": 10, "minimo": 15},
    {"nome": "Calça de Moletom", "quantidade": 25, "minimo": 15},
    {"nome": "Calça Jeans", "quantidade": 8, "minimo": 10},
    {"nome": "Casaco de Lã", "quantidade": 30, "minimo": 15},
    {"nome": "Gorro", "quantidade": 10, "minimo": 10}
]

def produtos_abaixo_minimo(estoque):
    lista_abaixo_minimo = []
    df = pd.DataFrame({"nome": [], "quantidade": [], "minimo": []})
    for i in estoque:
        df.loc[len(df)] = [i["nome"], i["quantidade"], i["minimo"]]

    item_abaixo_minimo = df[["nome"]].loc[df["quantidade"] < df["minimo"]].reset_index()
    for i in range(len(item_abaixo_minimo)):
        lista_abaixo_minimo.append(item_abaixo_minimo.loc[i, "nome"])

    return lista_abaixo_minimo

lista_resultado = produtos_abaixo_minimo(estoque)
print(lista_resultado)

- 5)
import pandas as pd
import matplotlib.pyplot as plt

def visualizar_caminho(matriz, dp):
    """
    Visualiza o tabuleiro e o caminho mínimo.

    Args:
        matriz (list[list[int]]): Matriz representando o tabuleiro.
        dp (list[list[int]]): Matriz com os custos mínimos.
    """

    n = len(matriz)
    m = len(matriz[0])

    # Cria um DataFrame do pandas para facilitar a visualização
    df = pd.DataFrame(matriz)

    # Cria um gráfico de calor para visualizar os custos
    plt.imshow(df, cmap='viridis')
    plt.colorbar()

    # Adiciona anotações com os custos
    for i in range(n):
        for j in range(m):
            plt.text(j, i, matriz[i][j], color='black')

    plt.title("Tabuleiro com Custos")
    plt.show()

# Exemplo de uso
matriz = [
    [2, 3, 4],
    [5, 5, 5],
    [1, 2, 3]
]

custo_minimo = caminho_minimo(matriz)
print("Custo mínimo:", custo_minimo)

# Visualiza o tabuleiro
dp = [[0] * len(matriz[0]) for _ in range(len(matriz))]
dp[0][0] = matriz[0][0]
for j in range(1, len(matriz[0])):
    dp[0][j] = dp[0][j-1] + matriz[0][j]
for i in range(1, len(matriz)):
    dp[i][0] = dp[i-1][0] + matriz[i][0]
for i in range(1, len(matriz)):
    for j in range(1, len(matriz[0])):
        dp[i][j] = matriz[i][j] + min(dp[i-1][j], dp[i][j-1])
visualizar_caminho(matriz, dp)

 EXERCÍCIOS DA LISTA 5:

- 1)
import numpy as np
import pandas as pd

from sklearn.datasets import load_wine
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

vinhos = load_wine()
x = pd.DataFrame(vinhos.data, columns=vinhos.feature_names) #carrega o dataframe com as características (eixo x)
print(x.shape)
print(x.head())

y = pd.DataFrame(vinhos.target, columns=['target']) #carrega a variável alvo
print(y.head())

#Treina o modelo de Árvore de Decisão
tree_model = DecisionTreeClassifier(random_state=42)
tree_model.fit(x_train, y_train)

y_pred = tree_model.predict(x_test) #Realiza previsões

print("\nMatriz de Confusão - Método da Árvore de Decisão:")
print(confusion_matrix(y_test, y_pred))

print("\nRelatório de Classificação:")
print(classification_report(y_test, y_pred))

#Treina o modelo KNN
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train, y_train.values.ravel())

y_pred = knn.predict(x_test) #Realiza previsões

print("\nMatriz de Confusão - Método KNN:")
print(confusion_matrix(y_test, y_pred))

print("\nRelatório de Classificação:")
print(classification_report(y_test, y_pred))

- 2)
