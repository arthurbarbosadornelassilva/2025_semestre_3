Características do Haskell

Linguagem puramente funcional
◉ Fortemente tipada, com inferência de tipos
◉ Suporta listas nativamente
◉ Implementação: compilador - interpretador
◉ é uma linguagem de programação funcional, de propósito geral e de computação retardada(Lazy evaluation).
◉ Computação retardada – os programas em haskell são executados usando uma técnica chamada avaliação preguiçosa , que se baseia na ideia de que nenhum
calculo deve ser realizado até que o seu resultado seja realmente necessário

Um programa funcional é uma chamada de função que normalmente chama outras
funções para gerar um valor de retorno. As principais operações nesse tipo de
programação são a composição de funções e a chamada recursiva de funções 
(o que torna o processamento pesado)

Todos os tipos são conhecidos em tempo de compilação.
● Existe inferências de tipos. Não é preciso explicitar de qual
tipo é um certo identificador.
● Haskell permite que um mesmo identificador seja declarado
em diferentes partes do programa, possivelmente
representando diferentes entidades.
● As conversões de dados são explicitas.

EXERCÍCIOS:

1 -)
module FuncoesEsfera where

import Data.Bifunctor (bimap)

myPiInt :: Int
myPiInt = 3

area :: Int -> Int
area r = myPiInt * (r * r)

volume :: Double -> Double
volume r = (4.0 / 3.0) * pi * (r * r * r)

main :: IO ()
main = do
  let testeArea = area 6
  putStrLn $ show testeArea ++ "cm²"

  let testeVolume = volume 6.0
  putStrLn $ show testeVolume ++ "cm³"

2 -)
celcius :: Double
celcius = 30.0

fahrenheit :: Double -> Double
fahrenheit tempCelcius = (tempCelcius * 9.0 / 5.0) + 32.0

main :: IO ()
main = do
  let testeFahrenheit = fahrenheit celcius
  putStrLn $ show testeFahrenheit